@using Microsoft.AspNetCore.Components.Web.Virtualization
@inject NodeTreeBrowserService browserService

<div class="row browser-container">
    <div class="col d-flex flex-column" style="height:100%;">
        <div class="input-group mb-3">
            <input type="text" value="@searchParam" @onchange="OnSearchChanged" class="form-control" placeholder="Search">
            <div class="input-group-append">
                <button class="btn btn-secondary" type="button">
                    <i class="fa fa-search"></i>
                </button>
            </div>
        </div>
        <div class="list-group overflow-auto fancy-scrollbar">
            <PagedExpandingList @ref="listComponent" Context="nodeTree" ItemsProvider="LoadNodeTrees" ChunkSize="3">
                <ItemContent>
                    <NodeTreePreview Model="nodeTree" OnSelected="SelectNodeTree" />
                </ItemContent>
            </PagedExpandingList>
        </div>
    </div>
    <div class="col">
        <NodeTreeDetailsView />
    </div>
</div>


@code {
    string? searchParam;

    private async Task OnSearchChanged(ChangeEventArgs e)
    {
        searchParam = e.Value?.ToString();
        await listComponent!.RefreshDataAsync();
    }

    PagedExpandingList<NodeTreePreviewDto>? listComponent;

    private void SelectNodeTree(NodeTreePreviewDto tree)
    {
        browserService.SelectedNodeTree = tree;
    }

    private async ValueTask<ItemsProviderResult<NodeTreePreviewDto>> LoadNodeTrees(
        ItemsProviderRequest request)
    {
        //TODO: Handle HttpRequestException
        try
        {
            var nodeTreesPaged = await browserService.GetAllNodeTrees(
                request.CancellationToken,
                searchParam,
                request.StartIndex,
                request.Count);

            return new ItemsProviderResult<NodeTreePreviewDto>(nodeTreesPaged.Contents, nodeTreesPaged.TotalSize);
        }
        catch (OperationCanceledException)
        {
            return new ItemsProviderResult<NodeTreePreviewDto>();
        }
    }
}
