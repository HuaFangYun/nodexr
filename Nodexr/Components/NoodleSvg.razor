@implements IDisposable

<path id="@DomId" class="noodle" d="@PathInstructions"
      style="@(Noodle.Connected ? "" : "display:none;") @CssStrokeStyle" />

@code {

    [Parameter] public INoodleData Noodle { get; set; } = null!;
    [Parameter] public string? DomId { get; set; } = null;
    [Parameter] public string? Gradient { get; set; }

    public bool Valid { get; set; } = true;
    //public string CssClass => Valid ? normalClass : invalidClass;
    protected string PathInstructions
    {
        get
        {
            var startX = (long)Noodle.StartPos.x;
            var startY = (long)Noodle.StartPos.y + 0.01d;
            var endX = (long)Noodle.EndPos.x;
            var endY = (long)Noodle.EndPos.y;
            double ctrlLength = 5 + 0.4 * Math.Abs(endX - startX) + Math.Min(0.2 * Math.Abs(endY - startY), 40);
            return FormattableString.Invariant(
                $"M {startX} {startY} C {startX + ctrlLength} {startY} {endX - ctrlLength} {endY} {endX} {endY}");
        }
    }

    string CssStrokeStyle => string.IsNullOrEmpty(Gradient) ?
        "" :
        "stroke: url(#" + Gradient + ")";


    protected override void OnInitialized()
    {
        Noodle.NoodleChanged += Refresh;
    }

    public void Refresh(object? sender, EventArgs e)
    {
        StateHasChanged();
    }

    public void Dispose()
    {
        Noodle.NoodleChanged -= Refresh;
    }
}
