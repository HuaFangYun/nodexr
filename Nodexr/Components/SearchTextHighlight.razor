@using System.Text.RegularExpressions;
@using System.Linq;
@inject RegexReplaceHandler RegexReplaceHandler
@inject INodeHandler NodeHandler

<div class="search-text-highlight">
    <textarea @bind-value="@RegexReplaceHandler.SearchText" @bind-value:event="oninput" class="search-textarea" />
    <div style="padding:3px">
        @foreach ((string text, bool isMatch) str in GetSubstrings())
        {
            if (str.isMatch)
            {
                <mark>@str.text</mark>
            }
            else
            {
                <span>@str.text</span>
            }
        }
    </div>
</div>

@code {
    private List<(string text, bool isMatch)> GetSubstrings()
    {
        var text = RegexReplaceHandler.SearchText;
        var matches = RegexReplaceHandler.GetAllMatches();
        if (matches is null)
        {
            return new() { (text, false) };
        }
        var matchesSafe = new List<(string, bool)>();

        int previousMatchEnd = 0;
        //Matches are ordered by index to support the RightToLeft Regex option
        foreach (Match match in matches.OrderBy(match => match.Index))
        {
            //Add the text preceding the match
            matchesSafe.Add((text.Substring(previousMatchEnd, match.Index - previousMatchEnd), false));
            //Add the matched text
            matchesSafe.Add((match.Value, match.Success));
            previousMatchEnd = match.Index + match.Length;
        }
        //Add the remaining text
        matchesSafe.Add((text.Substring(previousMatchEnd), false));

        return matchesSafe;
    }

    protected override void OnInitialized()
    {
        NodeHandler.OutputChanged += StateHasChanged;
        RegexReplaceHandler.RegexOptionsChanged += StateHasChanged;
        RegexReplaceHandler.SearchTextChanged += StateHasChanged;
    }
}
