@inject INoodleDragService NoodleDragService

<div draggable="true" class="@CssClass"
     onmousedown="event.stopPropagation()" ondrag="tempNoodle.dragNoodle(event)"
     @ondragstart="OnDragStart" @ondragstart:stopPropagation
     @ondrop="@(() => NoodleDragService.OnDropNoodle(Input))" @ondragend="OnDragEnd"
     ondragover="event.preventDefault()">
    @if (IsPrevious)
    {
        <span class="outputtooltip" style="right:0">Previous</span>
    }
</div>

@code {
    [Parameter] public IInputPort Input { get; set; } = null!;
    [Parameter] public bool IsPrevious { get; set; } = false;

    string CssClass => "node-input-dot" + (IsPrevious ? " input-dot-previous" : "");

    protected override bool ShouldRender() => false;

    void OnDragStart(DragEventArgs e)
    {
        if (Input.Connected)
        {
            NoodleDragService.OnStartNoodleDrag(Input.ConnectedNodeUntyped!, Input.Pos);
            Input.TrySetConnectedNode(null);
        }
    }

    void OnDragEnd(DragEventArgs e)
    {
        NoodleDragService.CancelDrag();
    }
}
