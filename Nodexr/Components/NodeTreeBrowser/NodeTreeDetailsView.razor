@inject NodeTreeBrowserService browserService
@implements IDisposable

@if (Model != null)
{
    <h4>@(Model.Title ?? "...")</h4>
    <code style="font-size:1.5em; line-break: anywhere">@(Model.Expression ?? "...")</code>
    <p>@(Model.Description ?? "No description provided.")</p>
    <button class="float-right btn btn-outline-light" @onclick="LoadSelectedNodeTree">Load</button>
}
else
{
    <p>Select an expression to load.</p>
}

@code {
    [CascadingParameter] BlazoredModalInstance BlazoredModal { get; set; } = null!;

    private NodeTreePreviewDto? Model => browserService.SelectedNodeTree;

    protected override void OnInitialized()
    {
        browserService.SelectedNodeTreeChanged += OnSelectedNodeTreeChanged;
    }

    public void Dispose()
    {
        browserService.SelectedNodeTreeChanged -= OnSelectedNodeTreeChanged;
    }

    private void OnSelectedNodeTreeChanged()
    {
        StateHasChanged();
    }

    private async Task LoadSelectedNodeTree()
    {
        await BlazoredModal.CloseAsync();
        browserService.LoadSelectedNodeTree();
    }
}
