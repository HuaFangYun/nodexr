@typeparam TItem

@using System.Threading
@using Microsoft.AspNetCore.Components.Web.Virtualization

@foreach (var item in items)
{
    @ItemContent(item)
}

@if (isLoading || NumItemsInNextLoad > 0)
{
    <button @onclick="LoadNextItems" disabled="@isLoading" class="btn btn-outline-light mt-3">
        @if (isLoading)
        {
            <div class="spinner-border spinner-border-sm" role="status">
                <span class="sr-only"></span>
            </div>
        }
        else
        {
            @:Load @(isLastChunk ? "last" : "next") @NumItemsInNextLoad items
        }
    </button>
}

@code {
    private bool isLoading = true;

    //Stores all the items to be rendered.
    private List<TItem> items = new();

    //The total number of items that can be returned by the ItemsProvider.
    private int totalItemCount;

    //Used to determine the value for the 'Load Next Items' button.
    private int NumItemsInNextLoad =>
        Math.Min(totalItemCount - items.Count, ChunkSize);

    private bool isLastChunk => items.Count + ChunkSize >= totalItemCount;

    /// <summary>
    /// Gets or sets the function providing items to the list.
    /// </summary>
    [EditorRequired]
    [Parameter]
    public ItemsProviderDelegate<TItem> ItemsProvider { get; set; } = null!;

    /// <summary>
    /// Template for rendering list items.
    /// </summary>
    [EditorRequired]
    [Parameter]
    public RenderFragment<TItem> ItemContent { get; set; } = null!;

    /// <summary>
    /// The number of items to add to the list each time the 'Load Next' button is pressed, and the default number of items to show.
    /// </summary>
    [Parameter]
    public int ChunkSize { get; set; } = 25;

    protected override async Task OnInitializedAsync()
    {
        await LoadNextItems();
    }

    private async Task LoadNextItems()
    {
        await LoadNextItems(ChunkSize);
    }

    private async Task LoadNextItems(int numItems)
    {
        isLoading = true;
        var cancellationToken = new CancellationToken(); //Dummy token for ItemsProviderRequest, currently unused.
        var itemsProviderRequest = new ItemsProviderRequest(items.Count, numItems, cancellationToken);
        var newItems = await ItemsProvider(itemsProviderRequest);

        //This check is a cheap workaround to prevent multiple requests being added to the list out of order. Should ideally be implemented with CancellationToken.
        if (isLoading)
        {
            totalItemCount = newItems.TotalItemCount;
            items.AddRange(newItems.Items);
            isLoading = false;
        }
    }

    public async Task RefreshDataAsync()
    {
        items.Clear();
        await LoadNextItems();
    }
}
